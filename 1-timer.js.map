{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst dateInput = document.querySelector('#datetime-picker');\nconst startBtn = document.querySelector('button[data-start]');\nstartBtn.disabled = true;\nlet userSelectedDate = null; //! select date in milliseconds\n\nconst daysEl = document.querySelector('span[data-days]');\nconst hoursEl = document.querySelector('span[data-hours]');\nconst minutesEl = document.querySelector('span[data-minutes]');\nconst secondsEl = document.querySelector('span[data-seconds]');\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] < options.defaultDate) {\n      return iziToast.error({\n        color: 'red',\n        message: 'Please select a future date.',\n        position: 'topRight',\n        close: false,\n      });\n    }\n    userSelectedDate = selectedDates[0];\n    startBtn.disabled = false;\n  },\n};\n\nflatpickr(dateInput, options);\n\nstartBtn.addEventListener('click', start);\n\nfunction start() {\n  updateInterval();\n}\n\nfunction updateInterval() {\n  let intervalId = setInterval(() => {\n    dateInput.disabled = true;\n    const currentDate = Date.now();\n    let diff = userSelectedDate - currentDate;\n    const { days, hours, minutes, seconds } = convertMs(diff);\n    console.log(String(days).padStart(2, '0'));\n    daysEl.textContent = String(days).padStart(2, '0');\n    hoursEl.textContent = String(hours).padStart(2, '0');\n    minutesEl.textContent = String(minutes).padStart(2, '0');\n    secondsEl.textContent = String(seconds).padStart(2, '0');\n    startBtn.disabled = true;\n    if (diff <= 1000) {\n      clearInterval(intervalId);\n      startBtn.disabled = false;\n      dateInput.disabled = false;\n    }\n  }, 1000);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["dateInput","startBtn","userSelectedDate","daysEl","hoursEl","minutesEl","secondsEl","options","selectedDates","iziToast","flatpickr","start","updateInterval","intervalId","currentDate","diff","days","hours","minutes","seconds","convertMs","ms"],"mappings":"+IAMA,MAAMA,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAW,SAAS,cAAc,oBAAoB,EAC5DA,EAAS,SAAW,GACpB,IAAIC,EAAmB,KAAK;AAE5B,MAAMC,EAAS,SAAS,cAAc,iBAAiB,EACjDC,EAAU,SAAS,cAAc,kBAAkB,EACnDC,EAAY,SAAS,cAAc,oBAAoB,EACvDC,EAAY,SAAS,cAAc,oBAAoB,EAEvDC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,GAAIA,EAAc,CAAC,EAAID,EAAQ,YAC7B,OAAOE,EAAS,MAAM,CACpB,MAAO,MACP,QAAS,+BACT,SAAU,WACV,MAAO,EACf,CAAO,EAEHP,EAAmBM,EAAc,CAAC,EAClCP,EAAS,SAAW,EACrB,CACH,EAEAS,EAAUV,EAAWO,CAAO,EAE5BN,EAAS,iBAAiB,QAASU,CAAK,EAExC,SAASA,GAAQ,CACfC,GACF,CAEA,SAASA,GAAiB,CACxB,IAAIC,EAAa,YAAY,IAAM,CACjCb,EAAU,SAAW,GACrB,MAAMc,EAAc,KAAK,MACzB,IAAIC,EAAOb,EAAmBY,EAC9B,KAAM,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAI,EACxD,QAAQ,IAAI,OAAOC,CAAI,EAAE,SAAS,EAAG,GAAG,CAAC,EACzCb,EAAO,YAAc,OAAOa,CAAI,EAAE,SAAS,EAAG,GAAG,EACjDZ,EAAQ,YAAc,OAAOa,CAAK,EAAE,SAAS,EAAG,GAAG,EACnDZ,EAAU,YAAc,OAAOa,CAAO,EAAE,SAAS,EAAG,GAAG,EACvDZ,EAAU,YAAc,OAAOa,CAAO,EAAE,SAAS,EAAG,GAAG,EACvDlB,EAAS,SAAW,GAChBc,GAAQ,MACV,cAAcF,CAAU,EACxBZ,EAAS,SAAW,GACpBD,EAAU,SAAW,GAExB,EAAE,GAAI,CACT,CAEA,SAASoB,EAAUC,EAAI,CAOrB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAE1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EAEpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EAEjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}